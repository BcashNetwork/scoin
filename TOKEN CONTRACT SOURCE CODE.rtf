{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 6.3.9600}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 // Created using Token Wizard {{\field{\*\fldinst{HYPERLINK https://github.com/poanetwork/token-wizard }}{\fldrslt{https://github.com/poanetwork/token-wizard\ul0\cf0}}}}\f0\fs22  by POA Network \par
pragma solidity ^0.4.11;\par
\par
\par
/**\par
 * @title ERC20Basic\par
 * @dev Simpler version of ERC20 interface\par
 * @dev see {{\field{\*\fldinst{HYPERLINK https://github.com/ethereum/EIPs/issues/179 }}{\fldrslt{https://github.com/ethereum/EIPs/issues/179\ul0\cf0}}}}\f0\fs22\par
 */\par
contract ERC20Basic \{\par
  uint256 public totalSupply;\par
  function balanceOf(address who) public constant returns (uint256);\par
  function transfer(address to, uint256 value) public returns (bool);\par
  event Transfer(address indexed from, address indexed to, uint256 value);\par
\}\par
\par
\par
\par
/**\par
 * @title Ownable\par
 * @dev The Ownable contract has an owner address, and provides basic authorization control\par
 * functions, this simplifies the implementation of "user permissions".\par
 */\par
contract Ownable \{\par
  address public owner;\par
\par
\par
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\par
\par
\par
  /**\par
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\par
   * account.\par
   */\par
  function Ownable() \{\par
    owner = msg.sender;\par
  \}\par
\par
\par
  /**\par
   * @dev Throws if called by any account other than the owner.\par
   */\par
  modifier onlyOwner() \{\par
    require(msg.sender == owner);\par
    _;\par
  \}\par
\par
\par
  /**\par
   * @dev Allows the current owner to transfer control of the contract to a newOwner.\par
   * @param newOwner The address to transfer ownership to.\par
   */\par
  function transferOwnership(address newOwner) onlyOwner public \{\par
    require(newOwner != address(0));\par
    OwnershipTransferred(owner, newOwner);\par
    owner = newOwner;\par
  \}\par
\par
\}\par
// Temporarily have SafeMath here until all contracts have been migrated to SafeMathLib version from OpenZeppelin\par
\par
\par
\par
\par
/**\par
 * Math operations with safety checks\par
 */\par
contract SafeMath \{\par
  function safeMul(uint a, uint b) internal returns (uint) \{\par
    uint c = a * b;\par
    assert(a == 0 || c / a == b);\par
    return c;\par
  \}\par
\par
  function safeDiv(uint a, uint b) internal returns (uint) \{\par
    assert(b > 0);\par
    uint c = a / b;\par
    assert(a == b * c + a % b);\par
    return c;\par
  \}\par
\par
  function safeSub(uint a, uint b) internal returns (uint) \{\par
    assert(b <= a);\par
    return a - b;\par
  \}\par
\par
  function safeAdd(uint a, uint b) internal returns (uint) \{\par
    uint c = a + b;\par
    assert(c>=a && c>=b);\par
    return c;\par
  \}\par
\par
  function max64(uint64 a, uint64 b) internal constant returns (uint64) \{\par
    return a >= b ? a : b;\par
  \}\par
\par
  function min64(uint64 a, uint64 b) internal constant returns (uint64) \{\par
    return a < b ? a : b;\par
  \}\par
\par
  function max256(uint256 a, uint256 b) internal constant returns (uint256) \{\par
    return a >= b ? a : b;\par
  \}\par
\par
  function min256(uint256 a, uint256 b) internal constant returns (uint256) \{\par
    return a < b ? a : b;\par
  \}\par
\par
\}\par
/**\par
 * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see {{\field{\*\fldinst{HYPERLINK https://tokenmarket.net }}{\fldrslt{https://tokenmarket.net\ul0\cf0}}}}\f0\fs22\par
 *\par
 * Licensed under the Apache License, version 2.0: {{\field{\*\fldinst{HYPERLINK https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt }}{\fldrslt{https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\ul0\cf0}}}}\f0\fs22\par
 */\par
\par
\par
\par
/**\par
 * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see {{\field{\*\fldinst{HYPERLINK https://tokenmarket.net }}{\fldrslt{https://tokenmarket.net\ul0\cf0}}}}\f0\fs22\par
 *\par
 * Licensed under the Apache License, version 2.0: {{\field{\*\fldinst{HYPERLINK https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt }}{\fldrslt{https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\ul0\cf0}}}}\f0\fs22\par
 */\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
/**\par
 * @title ERC20 interface\par
 * @dev see {{\field{\*\fldinst{HYPERLINK https://github.com/ethereum/EIPs/issues/20 }}{\fldrslt{https://github.com/ethereum/EIPs/issues/20\ul0\cf0}}}}\f0\fs22\par
 */\par
contract ERC20 is ERC20Basic \{\par
  function allowance(address owner, address spender) public constant returns (uint256);\par
  function transferFrom(address from, address to, uint256 value) public returns (bool);\par
  function approve(address spender, uint256 value) public returns (bool);\par
  event Approval(address indexed owner, address indexed spender, uint256 value);\par
\}\par
\par
\par
\par
\par
/**\par
 * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\par
 *\par
 * Based on code by FirstBlood:\par
 * {{\field{\*\fldinst{HYPERLINK https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol }}{\fldrslt{https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\ul0\cf0}}}}\f0\fs22\par
 */\par
contract StandardToken is ERC20, SafeMath \{\par
\par
  /* Token supply got increased and a new owner received these tokens */\par
  event Minted(address receiver, uint amount);\par
\par
  /* Actual balances of token holders */\par
  mapping(address => uint) balances;\par
\par
  /* approve() allowances */\par
  mapping (address => mapping (address => uint)) allowed;\par
\par
  /* Interface declaration */\par
  function isToken() public constant returns (bool weAre) \{\par
    return true;\par
  \}\par
\par
  function transfer(address _to, uint _value) returns (bool success) \{\par
    balances[msg.sender] = safeSub(balances[msg.sender], _value);\par
    balances[_to] = safeAdd(balances[_to], _value);\par
    Transfer(msg.sender, _to, _value);\par
    return true;\par
  \}\par
\par
  function transferFrom(address _from, address _to, uint _value) returns (bool success) \{\par
    uint _allowance = allowed[_from][msg.sender];\par
\par
    balances[_to] = safeAdd(balances[_to], _value);\par
    balances[_from] = safeSub(balances[_from], _value);\par
    allowed[_from][msg.sender] = safeSub(_allowance, _value);\par
    Transfer(_from, _to, _value);\par
    return true;\par
  \}\par
\par
  function balanceOf(address _owner) constant returns (uint balance) \{\par
    return balances[_owner];\par
  \}\par
\par
  function approve(address _spender, uint _value) returns (bool success) \{\par
\par
    // To change the approve amount you first have to reduce the addresses`\par
    //  allowance to zero by calling `approve(_spender, 0)` if it is not\par
    //  already 0 to mitigate the race condition described here:\par
    //  {{\field{\*\fldinst{HYPERLINK https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 }}{\fldrslt{https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\ul0\cf0}}}}\f0\fs22\par
    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\par
\par
    allowed[msg.sender][_spender] = _value;\par
    Approval(msg.sender, _spender, _value);\par
    return true;\par
  \}\par
\par
  function allowance(address _owner, address _spender) constant returns (uint remaining) \{\par
    return allowed[_owner][_spender];\par
  \}\par
\par
\}\par
\par
/**\par
 * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see {{\field{\*\fldinst{HYPERLINK https://tokenmarket.net }}{\fldrslt{https://tokenmarket.net\ul0\cf0}}}}\f0\fs22\par
 *\par
 * Licensed under the Apache License, version 2.0: {{\field{\*\fldinst{HYPERLINK https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt }}{\fldrslt{https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\ul0\cf0}}}}\f0\fs22\par
 */\par
\par
\par
\par
\par
\par
/**\par
 * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see {{\field{\*\fldinst{HYPERLINK https://tokenmarket.net }}{\fldrslt{https://tokenmarket.net\ul0\cf0}}}}\f0\fs22\par
 *\par
 * Licensed under the Apache License, version 2.0: {{\field{\*\fldinst{HYPERLINK https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt }}{\fldrslt{https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\ul0\cf0}}}}\f0\fs22\par
 */\par
\par
\par
\par
/**\par
 * Upgrade agent interface inspired by Lunyr.\par
 *\par
 * Upgrade agent transfers tokens to a new contract.\par
 * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\par
 */\par
contract UpgradeAgent \{\par
\par
  uint public originalSupply;\par
\par
  /** Interface marker */\par
  function isUpgradeAgent() public constant returns (bool) \{\par
    return true;\par
  \}\par
\par
  function upgradeFrom(address _from, uint256 _value) public;\par
\par
\}\par
\par
\par
/**\par
 * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\par
 *\par
 * First envisioned by Golem and Lunyr projects.\par
 */\par
contract UpgradeableToken is StandardToken \{\par
\par
  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\par
  address public upgradeMaster;\par
\par
  /** The next contract where the tokens will be migrated. */\par
  UpgradeAgent public upgradeAgent;\par
\par
  /** How many tokens we have upgraded by now. */\par
  uint256 public totalUpgraded;\par
\par
  /**\par
   * Upgrade states.\par
   *\par
   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\par
   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\par
   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\par
   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\par
   *\par
   */\par
  enum UpgradeState \{Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading\}\par
\par
  /**\par
   * Somebody has upgraded some of his tokens.\par
   */\par
  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\par
\par
  /**\par
   * New upgrade agent available.\par
   */\par
  event UpgradeAgentSet(address agent);\par
\par
  /**\par
   * Do not allow construction without upgrade master set.\par
   */\par
  function UpgradeableToken(address _upgradeMaster) \{\par
    upgradeMaster = _upgradeMaster;\par
  \}\par
\par
  /**\par
   * Allow the token holder to upgrade some of their tokens to a new contract.\par
   */\par
  function upgrade(uint256 value) public \{\par
\par
      UpgradeState state = getUpgradeState();\par
      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) \{\par
        // Called in a bad state\par
        throw;\par
      \}\par
\par
      // Validate input value.\par
      if (value == 0) throw;\par
\par
      balances[msg.sender] = safeSub(balances[msg.sender], value);\par
\par
      // Take tokens out from circulation\par
      totalSupply = safeSub(totalSupply, value);\par
      totalUpgraded = safeAdd(totalUpgraded, value);\par
\par
      // Upgrade agent reissues the tokens\par
      upgradeAgent.upgradeFrom(msg.sender, value);\par
      Upgrade(msg.sender, upgradeAgent, value);\par
  \}\par
\par
  /**\par
   * Set an upgrade agent that handles\par
   */\par
  function setUpgradeAgent(address agent) external \{\par
\par
      if(!canUpgrade()) \{\par
        // The token is not yet in a state that we could think upgrading\par
        throw;\par
      \}\par
\par
      if (agent == 0x0) throw;\par
      // Only a master can designate the next agent\par
      if (msg.sender != upgradeMaster) throw;\par
      // Upgrade has already begun for an agent\par
      if (getUpgradeState() == UpgradeState.Upgrading) throw;\par
\par
      upgradeAgent = UpgradeAgent(agent);\par
\par
      // Bad interface\par
      if(!upgradeAgent.isUpgradeAgent()) throw;\par
      // Make sure that token supplies match in source and target\par
      if (upgradeAgent.originalSupply() != totalSupply) throw;\par
\par
      UpgradeAgentSet(upgradeAgent);\par
  \}\par
\par
  /**\par
   * Get the state of the token upgrade.\par
   */\par
  function getUpgradeState() public constant returns(UpgradeState) \{\par
    if(!canUpgrade()) return UpgradeState.NotAllowed;\par
    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\par
    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\par
    else return UpgradeState.Upgrading;\par
  \}\par
\par
  /**\par
   * Change the upgrade master.\par
   *\par
   * This allows us to set a new owner for the upgrade mechanism.\par
   */\par
  function setUpgradeMaster(address master) public \{\par
      if (master == 0x0) throw;\par
      if (msg.sender != upgradeMaster) throw;\par
      upgradeMaster = master;\par
  \}\par
\par
  /**\par
   * Child contract can enable to provide the condition when the upgrade can begun.\par
   */\par
  function canUpgrade() public constant returns(bool) \{\par
     return true;\par
  \}\par
\par
\}\par
\par
/**\par
 * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see {{\field{\*\fldinst{HYPERLINK https://tokenmarket.net }}{\fldrslt{https://tokenmarket.net\ul0\cf0}}}}\f0\fs22\par
 *\par
 * Licensed under the Apache License, version 2.0: {{\field{\*\fldinst{HYPERLINK https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt }}{\fldrslt{https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\ul0\cf0}}}}\f0\fs22\par
 */\par
\par
\par
\par
\par
\par
\par
\par
/**\par
 * Define interface for releasing the token transfer after a successful crowdsale.\par
 */\par
contract ReleasableToken is ERC20, Ownable \{\par
\par
  /* The finalizer contract that allows unlift the transfer limits on this token */\par
  address public releaseAgent;\par
\par
  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\par
  bool public released = false;\par
\par
  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\par
  mapping (address => bool) public transferAgents;\par
\par
  /**\par
   * Limit token transfer until the crowdsale is over.\par
   *\par
   */\par
  modifier canTransfer(address _sender) \{\par
\par
    if(!released) \{\par
        if(!transferAgents[_sender]) \{\par
            throw;\par
        \}\par
    \}\par
\par
    _;\par
  \}\par
\par
  /**\par
   * Set the contract that can call release and make the token transferable.\par
   *\par
   * Design choice. Allow reset the release agent to fix fat finger mistakes.\par
   */\par
  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public \{\par
\par
    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\par
    releaseAgent = addr;\par
  \}\par
\par
  /**\par
   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\par
   */\par
  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public \{\par
    transferAgents[addr] = state;\par
  \}\par
\par
  /**\par
   * One way function to release the tokens to the wild.\par
   *\par
   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\par
   */\par
  function releaseTokenTransfer() public onlyReleaseAgent \{\par
    released = true;\par
  \}\par
\par
  /** The function can be called only before or after the tokens have been releasesd */\par
  modifier inReleaseState(bool releaseState) \{\par
    if(releaseState != released) \{\par
        throw;\par
    \}\par
    _;\par
  \}\par
\par
  /** The function can be called only by a whitelisted release agent. */\par
  modifier onlyReleaseAgent() \{\par
    if(msg.sender != releaseAgent) \{\par
        throw;\par
    \}\par
    _;\par
  \}\par
\par
  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) \{\par
    // Call StandardToken.transfer()\par
   return super.transfer(_to, _value);\par
  \}\par
\par
  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) \{\par
    // Call StandardToken.transferForm()\par
    return super.transferFrom(_from, _to, _value);\par
  \}\par
\par
\}\par
\par
/**\par
 * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see {{\field{\*\fldinst{HYPERLINK https://tokenmarket.net }}{\fldrslt{https://tokenmarket.net\ul0\cf0}}}}\f0\fs22\par
 *\par
 * Licensed under the Apache License, version 2.0: {{\field{\*\fldinst{HYPERLINK https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt }}{\fldrslt{https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\ul0\cf0}}}}\f0\fs22\par
 */\par
\par
\par
\par
\par
/**\par
 * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see {{\field{\*\fldinst{HYPERLINK https://tokenmarket.net }}{\fldrslt{https://tokenmarket.net\ul0\cf0}}}}\f0\fs22\par
 *\par
 * Licensed under the Apache License, version 2.0: {{\field{\*\fldinst{HYPERLINK https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt }}{\fldrslt{https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\ul0\cf0}}}}\f0\fs22\par
 */\par
\par
\par
\par
/**\par
 * Safe unsigned safe math.\par
 *\par
 * {{\field{\*\fldinst{HYPERLINK https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli }}{\fldrslt{https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\ul0\cf0}}}}\f0\fs22\par
 *\par
 * Originally from {{\field{\*\fldinst{HYPERLINK https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol }}{\fldrslt{https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\ul0\cf0}}}}\f0\fs22\par
 *\par
 * Maintained here until merged to mainline zeppelin-solidity.\par
 *\par
 */\par
library SafeMathLibExt \{\par
\par
  function times(uint a, uint b) returns (uint) \{\par
    uint c = a * b;\par
    assert(a == 0 || c / a == b);\par
    return c;\par
  \}\par
\par
  function divides(uint a, uint b) returns (uint) \{\par
    assert(b > 0);\par
    uint c = a / b;\par
    assert(a == b * c + a % b);\par
    return c;\par
  \}\par
\par
  function minus(uint a, uint b) returns (uint) \{\par
    assert(b <= a);\par
    return a - b;\par
  \}\par
\par
  function plus(uint a, uint b) returns (uint) \{\par
    uint c = a + b;\par
    assert(c>=a);\par
    return c;\par
  \}\par
\par
\}\par
\par
\par
\par
\par
/**\par
 * A token that can increase its supply by another contract.\par
 *\par
 * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\par
 * Only mint agents, contracts whitelisted by owner, can mint new tokens.\par
 *\par
 */\par
contract MintableTokenExt is StandardToken, Ownable \{\par
\par
  using SafeMathLibExt for uint;\par
\par
  bool public mintingFinished = false;\par
\par
  /** List of agents that are allowed to create new tokens */\par
  mapping (address => bool) public mintAgents;\par
\par
  event MintingAgentChanged(address addr, bool state  );\par
\par
  /** inPercentageUnit is percents of tokens multiplied to 10 up to percents decimals.\par
  * For example, for reserved tokens in percents 2.54%\par
  * inPercentageUnit = 254\par
  * inPercentageDecimals = 2\par
  */\par
  struct ReservedTokensData \{\par
    uint inTokens;\par
    uint inPercentageUnit;\par
    uint inPercentageDecimals;\par
    bool isReserved;\par
    bool isDistributed;\par
  \}\par
\par
  mapping (address => ReservedTokensData) public reservedTokensList;\par
  address[] public reservedTokensDestinations;\par
  uint public reservedTokensDestinationsLen = 0;\par
  bool reservedTokensDestinationsAreSet = false;\par
\par
  modifier onlyMintAgent() \{\par
    // Only crowdsale contracts are allowed to mint new tokens\par
    if(!mintAgents[msg.sender]) \{\par
        throw;\par
    \}\par
    _;\par
  \}\par
\par
  /** Make sure we are not done yet. */\par
  modifier canMint() \{\par
    if(mintingFinished) throw;\par
    _;\par
  \}\par
\par
  function finalizeReservedAddress(address addr) public onlyMintAgent canMint \{\par
    ReservedTokensData storage reservedTokensData = reservedTokensList[addr];\par
    reservedTokensData.isDistributed = true;\par
  \}\par
\par
  function isAddressReserved(address addr) public constant returns (bool isReserved) \{\par
    return reservedTokensList[addr].isReserved;\par
  \}\par
\par
  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) \{\par
    return reservedTokensList[addr].isDistributed;\par
  \}\par
\par
  function getReservedTokens(address addr) public constant returns (uint inTokens) \{\par
    return reservedTokensList[addr].inTokens;\par
  \}\par
\par
  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) \{\par
    return reservedTokensList[addr].inPercentageUnit;\par
  \}\par
\par
  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) \{\par
    return reservedTokensList[addr].inPercentageDecimals;\par
  \}\par
\par
  function setReservedTokensListMultiple(\par
    address[] addrs, \par
    uint[] inTokens, \par
    uint[] inPercentageUnit, \par
    uint[] inPercentageDecimals\par
  ) public canMint onlyOwner \{\par
    assert(!reservedTokensDestinationsAreSet);\par
    assert(addrs.length == inTokens.length);\par
    assert(inTokens.length == inPercentageUnit.length);\par
    assert(inPercentageUnit.length == inPercentageDecimals.length);\par
    for (uint iterator = 0; iterator < addrs.length; iterator++) \{\par
      if (addrs[iterator] != address(0)) \{\par
        setReservedTokensList(addrs[iterator], inTokens[iterator], inPercentageUnit[iterator], inPercentageDecimals[iterator]);\par
      \}\par
    \}\par
    reservedTokensDestinationsAreSet = true;\par
  \}\par
\par
  /**\par
   * Create new tokens and allocate them to an address..\par
   *\par
   * Only callably by a crowdsale contract (mint agent).\par
   */\par
  function mint(address receiver, uint amount) onlyMintAgent canMint public \{\par
    totalSupply = totalSupply.plus(amount);\par
    balances[receiver] = balances[receiver].plus(amount);\par
\par
    // This will make the mint transaction apper in EtherScan.io\par
    // We can remove this after there is a standardized minting event\par
    Transfer(0, receiver, amount);\par
  \}\par
\par
  /**\par
   * Owner can allow a crowdsale contract to mint new tokens.\par
   */\par
  function setMintAgent(address addr, bool state) onlyOwner canMint public \{\par
    mintAgents[addr] = state;\par
    MintingAgentChanged(addr, state);\par
  \}\par
\par
  function setReservedTokensList(address addr, uint inTokens, uint inPercentageUnit, uint inPercentageDecimals) private canMint onlyOwner \{\par
    assert(addr != address(0));\par
    if (!isAddressReserved(addr)) \{\par
      reservedTokensDestinations.push(addr);\par
      reservedTokensDestinationsLen++;\par
    \}\par
\par
    reservedTokensList[addr] = ReservedTokensData(\{\par
      inTokens: inTokens, \par
      inPercentageUnit: inPercentageUnit, \par
      inPercentageDecimals: inPercentageDecimals,\par
      isReserved: true,\par
      isDistributed: false\par
    \});\par
  \}\par
\}\par
\par
\par
/**\par
 * A crowdsaled token.\par
 *\par
 * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\par
 *\par
 * - The token transfer() is disabled until the crowdsale is over\par
 * - The token contract gives an opt-in upgrade path to a new contract\par
 * - The same token can be part of several crowdsales through approve() mechanism\par
 * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\par
 *\par
 */\par
contract CrowdsaleTokenExt is ReleasableToken, MintableTokenExt, UpgradeableToken \{\par
\par
  /** Name and symbol were updated. */\par
  event UpdatedTokenInformation(string newName, string newSymbol);\par
\par
  event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\par
\par
  string public name;\par
\par
  string public symbol;\par
\par
  uint public decimals;\par
\par
  /* Minimum ammount of tokens every buyer can buy. */\par
  uint public minCap;\par
\par
  /**\par
   * Construct the token.\par
   *\par
   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\par
   *\par
   * @param _name Token name\par
   * @param _symbol Token symbol - should be all caps\par
   * @param _initialSupply How many tokens we start with\par
   * @param _decimals Number of decimal places\par
   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\par
   */\par
  function CrowdsaleTokenExt(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable, uint _globalMinCap)\par
    UpgradeableToken(msg.sender) \{\par
\par
    // Create any address, can be transferred\par
    // to team multisig via changeOwner(),\par
    // also remember to call setUpgradeMaster()\par
    owner = msg.sender;\par
\par
    name = _name;\par
    symbol = _symbol;\par
\par
    totalSupply = _initialSupply;\par
\par
    decimals = _decimals;\par
\par
    minCap = _globalMinCap;\par
\par
    // Create initially all balance on the team multisig\par
    balances[owner] = totalSupply;\par
\par
    if(totalSupply > 0) \{\par
      Minted(owner, totalSupply);\par
    \}\par
\par
    // No more new supply allowed after the token creation\par
    if(!_mintable) \{\par
      mintingFinished = true;\par
      if(totalSupply == 0) \{\par
        throw; // Cannot create a token without supply and no minting\par
      \}\par
    \}\par
  \}\par
\par
  /**\par
   * When token is released to be transferable, enforce no new tokens can be created.\par
   */\par
  function releaseTokenTransfer() public onlyReleaseAgent \{\par
    mintingFinished = true;\par
    super.releaseTokenTransfer();\par
  \}\par
\par
  /**\par
   * Allow upgrade agent functionality kick in only if the crowdsale was success.\par
   */\par
  function canUpgrade() public constant returns(bool) \{\par
    return released && super.canUpgrade();\par
  \}\par
\par
  /**\par
   * Owner can update token information here.\par
   *\par
   * It is often useful to conceal the actual token association, until\par
   * the token operations, like central issuance or reissuance have been completed.\par
   *\par
   * This function allows the token owner to rename the token after the operations\par
   * have been completed and then point the audience to use the token contract.\par
   */\par
  function setTokenInformation(string _name, string _symbol) onlyOwner \{\par
    name = _name;\par
    symbol = _symbol;\par
\par
    UpdatedTokenInformation(name, symbol);\par
  \}\par
\par
  /**\par
   * Claim tokens that were accidentally sent to this contract.\par
   *\par
   * @param _token The address of the token contract that you want to recover.\par
   */\par
  function claimTokens(address _token) public onlyOwner \{\par
    require(_token != address(0));\par
\par
    ERC20 token = ERC20(_token);\par
    uint balance = token.balanceOf(this);\par
    token.transfer(owner, balance);\par
\par
    ClaimedTokens(_token, owner, balance);\par
  \}\par
\par
\}\par
}
 